{
    "module_imports": ["Size2i", "IntOut"],
    "const_ignore_list": [
        "CV_TM_.+",
        "CV_COLORCVT_MAX",
        "CV_.*Bayer.*",
        "CV_YUV420(i|sp|p)2.+",
        "CV_L?(BGRA?|RGBA?|GRAY|XYZ|YCrCb|Luv|Lab|HLS|YUV|HSV)\\d*2L?(BGRA?|RGBA?|GRAY|XYZ|YCrCb|Luv|Lab|HLS|YUV|HSV).*",
        "CV_FLOODFILL_.+",
        "CV_ADAPTIVE_THRESH_.+"
    ],
    "const_private_list" : [
        "CV_MOP_.+",
        "CV_INTER_.+",
        "CV_THRESH_.+",
        "CV_INPAINT_.+",
        "CV_RETR_.+",
        "CV_CHAIN_APPROX_.+"
    ],
    "missing_consts" : {
        "Imgproc" : {
            "private" : [
                ["IPL_BORDER_CONSTANT",    0 ],
                ["IPL_BORDER_REPLICATE",   1 ],
                ["IPL_BORDER_REFLECT",     2 ],
                ["IPL_BORDER_WRAP",        3 ],
                ["IPL_BORDER_REFLECT_101", 4 ],
                ["IPL_BORDER_TRANSPARENT", 5 ]
            ]
        }
    },
    "ManualFuncs" : {
        "Imgproc" : {
            "getTextSize" : {
                "declaration" : [
                    "",
                    "// C++: Size getTextSize(const String& text, int fontFace, double fontScale, int thickness, int* baseLine);",
                    "+ (Size2i*)getTextSize:(NSString*)text fontFace:(int)fontFace fontScale:(double)fontScale thickness:(int)thickness baseLine:(IntOut*)baseLine;",
                    ""
                ],
                "implementation" : [
                    "",
                    "// C++: Size getTextSize(const String& text, int fontFace, double fontScale, int thickness, int* baseLine);",
                    "+ (Size2i*)getTextSize:(NSString*)text fontFace:(int)fontFace fontScale:(double)fontScale thickness:(int)thickness baseLine:(IntOut*)baseLine {",
                    "",
                    "    cv::Size rsize = cv::getTextSize(cv::String(text.UTF8String), fontFace, fontScale, thickness, baseLine.ptr);",
                    "",
                    "    return [Size2i fromNative: rsize];",
                    "",
                    "}"
                ]
            }
        }
    },
    "func_arg_fix" : {
        "goodFeaturesToTrack" : { "corners" : {"ctype" : "vector_Point"} },
        "minEnclosingCircle" : { "points" : {"ctype" : "vector_Point2f"} },
        "fitEllipse" : { "points" : {"ctype" : "vector_Point2f"} },
        "fillPoly"   : { "pts" : {"ctype" : "vector_vector_Point"} },
        "polylines"  : { "pts" : {"ctype" : "vector_vector_Point"} },
        "fillConvexPoly" : { "points" : {"ctype" : "vector_Point"} },
        "approxPolyDP" : { "curve"       : {"ctype" : "vector_Point2f"},
                           "approxCurve" : {"ctype" : "vector_Point2f"} },
        "arcLength" : { "curve" : {"ctype" : "vector_Point2f"} },
        "pointPolygonTest" : { "contour" : {"ctype" : "vector_Point2f"} },
        "minAreaRect" : { "points" : {"ctype" : "vector_Point2f"} },
        "getAffineTransform" : { "src" : {"ctype" : "vector_Point2f"},
                                 "dst" : {"ctype" : "vector_Point2f"} },
        "drawContours" : {"contours" : {"ctype" : "vector_vector_Point"} },
        "findContours" : {"contours" : {"ctype" : "vector_vector_Point"} },
        "convexityDefects" : { "contour"          : {"ctype" : "vector_Point"},
                               "convexhull"       : {"ctype" : "vector_int"},
                               "convexityDefects" : {"ctype" : "vector_Vec4i"} },
        "isContourConvex" : { "contour" : {"ctype" : "vector_Point"} },
        "convexHull" : { "points" : {"ctype" : "vector_Point"},
                         "hull"   : {"ctype" : "vector_int"},
                         "returnPoints" : {"ctype" : ""} },
        "(void)insert:(NSArray<Point2f*>*)ptvec" : { "insert" : {"name" : "insertVector"} }
    }
}
